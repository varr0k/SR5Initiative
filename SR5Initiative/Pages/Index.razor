@page "/"

<h3>Combat</h3>
<div class="row">
    <div class="col">
        <ul class="list-group">
            @if (combatants.Any())
            {
                @foreach (var combatant in combatants)
                {
                    <li class="@combatant.CssClass()" id="@combatant.Id">
                        <div class="row">
                            <div class="col-md-8">
                                <b>@combatant.DisplayName</b> - @combatant.InitiativeScore (@combatant.Edge @combatant.Reaction @combatant.Intuition)
                            </div>
                            <div class="col-md-4">
                                <div class="input-group">
                                    <input type="number" class="form-control" placeholder="5" id="initiative-@combatant.Id" @bind="combatant.InitiativeModifier" />
                                    <div class="input-group-append">
                                        <button class="btn btn-outline-secondary" type="button" @onclick="() => ModifyInitiative(combatant.Id, false)">
                                            <span class="oi oi-plus"></span>
                                        </button>
                                        <button class="btn btn-outline-secondary" type="button" @onclick="() => ModifyInitiative(combatant.Id, true)">
                                            <span class="oi oi-minus"></span>
                                        </button>
                                        <button class="btn btn-outline-danger" type="button" @onclick="() => RemoveCombatant(combatant.Id)">
                                            <span class="oi oi-trash"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </li>
                }

            }
            else
            {
                <li class="list-group-item list-group-item-secondary">No combatants added yet!</li>
            }
        </ul>
    </div>
</div>
<div class="row mt-2">
    <div class="col">
        <button class="btn btn-primary" @onclick="AdvancePhase">Next Phase</button>
        @*<button class="btn btn-primary" @onclick="AdvanceTurn">Next Turn</button>*@
    </div>
</div>
<div class="row mt-4">
    <div class="col-md-10">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Add Combatant</h5>
                <div class="form-row">
                    <div class="form-group col-md-8">
                        <label for="newCombatantName">Name</label>
                        <input type="text" class="form-control" placeholder="Name" id="newCombatantName" @bind="newCombatantName" />
                    </div>
                    <div class="form-group col-md-4">
                        <label for="newCombatantName">Initiative Score</label>
                        <input type="number" class="form-control" placeholder="0" id="newCombatantName" @bind="newCombatantInitiative" />
                    </div>
                </div>
                <div class="form-group">
                    <div class="form-check form-check-inline">
                        <input type="checkbox" class="form-check-input" id="newCombatantIsPlayer" @bind="newCombatantIsPlayer" />
                        <label class="form-check-label" for="newCombatantIsPlayer">Player Character</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input type="checkbox" class="form-check-input" id="newCombatantIsHostile" @bind="newCombatantIsHostile" />
                        <label class="form-check-label" for="newCombatantIsHostile">Hostile</label>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col">
                        <label for="newCombatantEdge">Edge</label>
                        <input type="number" class="form-control" placeholder="0" id="newCombatantEdge" @bind="newCombatantEdge" />

                    </div>
                    <div class="form-group col">
                        <label for="newCombatantReaction">Reaction</label>
                        <input type="number" class="form-control" placeholder="0" id="newCombatantReaction" @bind="newCombatantReaction" />

                    </div>
                    <div class="form-group col">
                        <label for="newCombatantIntuition">Intuition</label>
                        <input type="number" class="form-control" placeholder="0" id="newCombatantIntuition" @bind="newCombatantIntuition" />

                    </div>
                </div>
                <button class="btn btn-primary" @onclick="AddCombatant">Add</button>

            </div>

        </div>

    </div> 
</div>


@code {
    private List<Combatant> combatants = new();
    private int currentTurn = 0;
    private int currentPhase = 0;
    private string newCombatantName;
    private int newCombatantInitiative;
    private bool newCombatantIsPlayer;
    private bool newCombatantIsHostile;
    private int newCombatantEdge;
    private int newCombatantReaction;
    private int newCombatantIntuition;
    private int initiativeModify;


    /// <summary>
    /// Add a combatant to the initiative tracker, keeping the list in the correct order.
    /// </summary>
    private void AddCombatant()
    {
        combatants.Add(new Combatant
        {
            Id = Guid.NewGuid(),
            DisplayName = newCombatantName,
            InitiativeScore = newCombatantInitiative,
            IsPlayerCharacter = newCombatantIsPlayer,
            IsHostile = newCombatantIsHostile,
            Edge = newCombatantEdge,
            Reaction = newCombatantReaction,
            Intuition = newCombatantIntuition
        });
        combatants = combatants
            .OrderByDescending(c => c.InitiativeScore)
            .ThenByDescending(c => c.Edge)
            .ThenByDescending(c => c.Reaction)
            .ThenByDescending(c => c.Intuition)
            .ToList();
    }

    private void AdvancePhase()
    {
        foreach (var combatant in combatants)
        {
            combatant.SubtractInitiative(10);
        }

    }

    private void AdvanceTurn()
    {
        throw new NotImplementedException();

    }

    private void ModifyInitiative(Guid id, bool subtract)
    {
        var combatant = combatants.Where(c => c.Id == id).First();
        if (subtract)
        {
            combatant.SubtractInitiative(combatant.InitiativeModifier);
        }
        else
        {
            combatant.AddInitiative(combatant.InitiativeModifier);
        }

    }

    private void RemoveCombatant(Guid id)
    {
        var combatant = combatants.Where(c => c.Id == id).First();
        combatants.Remove(combatant);
    }

}
